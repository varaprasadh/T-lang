// Classic Algorithms in Telugu Programming Language
cheppu "Telugu Language - Classic Algorithms Demo";
cheppu "===========================================";

cheppu "";
cheppu "1. LINEAR SEARCH ALGORITHM";
cheppu "-------------------------";

// Search for a target value in an array
sankhya search_arr0 = 64;
sankhya search_arr1 = 34;
sankhya search_arr2 = 25;
sankhya search_arr3 = 12;
sankhya search_arr4 = 22;
sankhya search_size = 5;
sankhya search_target = 25;

cheppu "Array: [64, 34, 25, 12, 22]";
cheppu "Searching for: " + search_target;

sankhya search_found = 0;
sankhya search_index = -1;

prathi (i nunchi search_size) {
    sankhya current_val = 0;
    
    // Get current array value
    ayite (i == 0) {
        current_val = search_arr0;
    } lekapothe {
        ayite (i == 1) {
            current_val = search_arr1;
        } lekapothe {
            ayite (i == 2) {
                current_val = search_arr2;
            } lekapothe {
                ayite (i == 3) {
                    current_val = search_arr3;
                } lekapothe {
                    current_val = search_arr4;
                }
            }
        }
    }
    
    ayite (current_val == search_target) {
        search_found = 1;
        search_index = i;
    }
}

ayite (search_found == 1) {
    cheppu "Found " + search_target + " at index " + search_index;
} lekapothe {
    cheppu "Value " + search_target + " not found";
}

cheppu "";
cheppu "2. BUBBLE SORT ALGORITHM (Single Pass)";
cheppu "-------------------------------------";

// Simulate one pass of bubble sort
sankhya sort_arr0 = 64;
sankhya sort_arr1 = 34;
sankhya sort_arr2 = 25;
sankhya sort_arr3 = 12;
sankhya sort_arr4 = 22;
sankhya sort_size = 5;

cheppu "Original array: [64, 34, 25, 12, 22]";
cheppu "Performing one bubble sort pass...";

// One pass of bubble sort
prathi (i nunchi sort_size - 1) {
    sankhya val1 = 0;
    sankhya val2 = 0;
    
    // Get values at positions i and i+1
    ayite (i == 0) {
        val1 = sort_arr0;
        val2 = sort_arr1;
    } lekapothe {
        ayite (i == 1) {
            val1 = sort_arr1;
            val2 = sort_arr2;
        } lekapothe {
            ayite (i == 2) {
                val1 = sort_arr2;
                val2 = sort_arr3;
            } lekapothe {
                val1 = sort_arr3;
                val2 = sort_arr4;
            }
        }
    }
    
    // Swap if needed
    ayite (val1 > val2) {
        cheppu "Swapping " + val1 + " and " + val2 + " at positions " + i + " and " + (i + 1);
        
        // Perform the swap
        ayite (i == 0) {
            sort_arr0 = val2;
            sort_arr1 = val1;
        } lekapothe {
            ayite (i == 1) {
                sort_arr1 = val2;
                sort_arr2 = val1;
            } lekapothe {
                ayite (i == 2) {
                    sort_arr2 = val2;
                    sort_arr3 = val1;
                } lekapothe {
                    sort_arr3 = val2;
                    sort_arr4 = val1;
                }
            }
        }
    }
}

cheppu "After one pass: [" + sort_arr0 + ", " + sort_arr1 + ", " + sort_arr2 + ", " + sort_arr3 + ", " + sort_arr4 + "]";

cheppu "";
cheppu "3. FIBONACCI SEQUENCE GENERATOR";
cheppu "-------------------------------";

sankhya fib_n = 10;
cheppu "Generating first " + fib_n + " Fibonacci numbers:";

sankhya fib_a = 0;
sankhya fib_b = 1;
cheppu "F(0) = " + fib_a;
cheppu "F(1) = " + fib_b;

prathi (fib_i nunchi fib_n - 2) {
    sankhya fib_next = fib_a + fib_b;
    sankhya fib_index = fib_i + 2;
    cheppu "F(" + fib_index + ") = " + fib_next;
    
    fib_a = fib_b;
    fib_b = fib_next;
}


cheppu "";
cheppu "4. MAXIMUM AND MINIMUM FINDER";
cheppu "-----------------------------";

sankhya max_arr0 = 23;
sankhya max_arr1 = 45;
sankhya max_arr2 = 12;
sankhya max_arr3 = 67;
sankhya max_arr4 = 34;
sankhya max_size = 5;

cheppu "Array: [23, 45, 12, 67, 34]";

sankhya max_val = max_arr0;  // Initialize with first element
sankhya min_val = max_arr0;
sankhya max_index = 0;
sankhya min_index = 0;

prathi (i nunchi max_size) {
    sankhya current = 0;
    
    ayite (i == 0) {
        current = max_arr0;
    } lekapothe {
        ayite (i == 1) {
            current = max_arr1;
        } lekapothe {
            ayite (i == 2) {
                current = max_arr2;
            } lekapothe {
                ayite (i == 3) {
                    current = max_arr3;
                } lekapothe {
                    current = max_arr4;
                }
            }
        }
    }
    
    ayite (current > max_val) {
        max_val = current;
        max_index = i;
    }
    
    ayite (current < min_val) {
        min_val = current;
        min_index = i;
    }
}

cheppu "Maximum value: " + max_val + " at index " + max_index;
cheppu "Minimum value: " + min_val + " at index " + min_index;

cheppu "";
cheppu "5. FACTORIAL CALCULATOR";
cheppu "----------------------";

sankhya fact_n = 6;
cheppu "Calculating factorial of " + fact_n + ":";

sankhya factorial = 1;
prathi (fact_i nunchi fact_n) {
    sankhya multiplier = fact_i + 1;
    factorial = factorial * multiplier;
    cheppu fact_n + "! step " + (fact_i + 1) + ": " + factorial;
}

cheppu "Final result: " + fact_n + "! = " + factorial;

cheppu "";
cheppu "6. PRIME NUMBER CHECKER";
cheppu "----------------------";

sankhya prime_num = 17;
cheppu "Checking if " + prime_num + " is prime:";

sankhya is_prime = 1;  // Assume prime initially
ayite (prime_num <= 1) {
    is_prime = 0;
} lekapothe {
    prathi (divisor nunchi prime_num - 2) {  // Check from 2 to n-1
        sankhya div = divisor + 2;  // Start from 2
        sankhya remainder = prime_num % div;
        
        ayite (remainder == 0) {
            is_prime = 0;
            cheppu prime_num + " is divisible by " + div;
        }
    }
}

ayite (is_prime == 1) {
    cheppu prime_num + " is a prime number!";
} lekapothe {
    cheppu prime_num + " is not a prime number.";
}

cheppu "";
cheppu "Algorithm Demo Complete!";
cheppu "Telugu Programming Language successfully demonstrates:";
cheppu "- Search algorithms";
cheppu "- Sorting algorithms"; 
cheppu "- Mathematical sequences";
cheppu "- Array operations";
cheppu "- Number theory problems";
cheppu "- Complex conditional logic";
cheppu "";
cheppu "All implemented using native Telugu keywords!";