// Complete Two Sum Demo - Telugu Language
// Comprehensive implementation showcasing different approaches

cheppu "═══════════════════════════════════════";
cheppu "     Two Sum - Complete Demo";
cheppu "═══════════════════════════════════════";

// Utility Functions
// =================

pani printHeader(sankhya title) {
    cheppu "";
    cheppu title;
    sankhya i = 0;
    sankhya line = "";
    varaku (i < 40) {
        line = line + "=";
        i = i + 1;
    }
    cheppu line;
}

pani printArray(sankhya arr, sankhya size) {
    sankhya result = "[";
    sankhya i = 0;
    
    varaku (i < size) {
        result = result + arr[i];
        ayite (i < size - 1) {
            result = result + ", ";
        }
        i = i + 1;
    }
    
    result = result + "]";
    cheppu "Array: " + result;
}

pani printTestCase(sankhya num, sankhya arr, sankhya size, sankhya target) {
    cheppu "";
    cheppu "Test Case " + num + ":";
    printArray(arr, size);
    cheppu "Target: " + target;
    cheppu "";
}

// Basic Two Sum Implementation
// ============================

pani twoSumBasic(sankhya arr, sankhya size, sankhya target) {
    cheppu "→ Using basic nested loops...";
    
    sankhya i = 0;
    varaku (i < size) {
        sankhya j = i + 1;
        varaku (j < size) {
            ayite (arr[i] + arr[j] == target) {
                cheppu "✓ Found: arr[" + i + "] + arr[" + j + "] = " + arr[i] + " + " + arr[j] + " = " + target;
                tirigi_pampu 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    
    cheppu "✗ No solution found";
    tirigi_pampu 0;
}

// Optimized Two Sum with Early Exit
// =================================

pani twoSumOptimized(sankhya arr, sankhya size, sankhya target) {
    cheppu "→ Using optimized approach with early exit...";
    
    sankhya i = 0;
    varaku (i < size - 1) { // Optimization: size - 1
        sankhya j = i + 1;
        varaku (j < size) {
            sankhya sum = arr[i] + arr[j];
            
            ayite (sum == target) {
                cheppu "✓ Found: " + arr[i] + " + " + arr[j] + " = " + target + " at indices [" + i + ", " + j + "]";
                tirigi_pampu 1;
            }
            
            j = j + 1;
        }
        i = i + 1;
    }
    
    cheppu "✗ No solution found";
    tirigi_pampu 0;
}

// Verbose Two Sum with Debug Info
// ===============================

pani twoSumVerbose(sankhya arr, sankhya size, sankhya target) {
    cheppu "→ Using verbose approach with step-by-step info...";
    
    sankhya comparisons = 0;
    sankhya i = 0;
    
    varaku (i < size) {
        sankhya j = i + 1;
        varaku (j < size) {
            comparisons = comparisons + 1;
            sankhya sum = arr[i] + arr[j];
            
            cheppu "  Check: " + arr[i] + " + " + arr[j] + " = " + sum;
            
            ayite (sum == target) {
                cheppu "✓ SUCCESS! Found solution after " + comparisons + " comparisons";
                cheppu "  Answer: indices [" + i + ", " + j + "] with values [" + arr[i] + ", " + arr[j] + "]";
                tirigi_pampu 1;
            }
            
            j = j + 1;
        }
        i = i + 1;
    }
    
    cheppu "✗ No solution found after " + comparisons + " comparisons";
    tirigi_pampu 0;
}

// Performance Analysis Function
// =============================

pani analyzePerformance(sankhya size) {
    sankhya comparisons = size * (size - 1) / 2;
    
    cheppu "";
    cheppu "Performance Analysis:";
    cheppu "• Array size: " + size;
    cheppu "• Total comparisons: " + comparisons;
    cheppu "• Time complexity: O(n²)";
    cheppu "• Space complexity: O(1)";
    
    ayite (size <= 10) {
        cheppu "• Performance: Excellent for small arrays";
    } lekapothe {
        ayite (size <= 100) {
            cheppu "• Performance: Good for medium arrays";
        } lekapothe {
            cheppu "• Performance: Consider optimization for large arrays";
        }
    }
}

// Main Demo Execution
// ===================

printHeader("Demo 1: Basic Implementation");

sankhya demo1 = [2, 7, 11, 15];
printTestCase(1, demo1, 4, 9);
twoSumBasic(demo1, 4, 9);

printHeader("Demo 2: Optimized Implementation");

sankhya demo2 = [3, 2, 4];
printTestCase(2, demo2, 3, 6);
twoSumOptimized(demo2, 3, 6);

printHeader("Demo 3: Verbose Implementation");

sankhya demo3 = [1, 5, 3, 2];
printTestCase(3, demo3, 4, 7);
twoSumVerbose(demo3, 4, 7);

printHeader("Demo 4: Edge Cases");

// Edge case 1: Same numbers
sankhya demo4a = [3, 3];
printTestCase(4, demo4a, 2, 6);
twoSumBasic(demo4a, 2, 6);

// Edge case 2: No solution
sankhya demo4b = [1, 2, 3];
printTestCase(4, demo4b, 3, 10);
twoSumBasic(demo4b, 3, 10);

printHeader("Performance Analysis");
analyzePerformance(4);
analyzePerformance(10);
analyzePerformance(100);

printHeader("Summary");
cheppu "✓ Basic implementation: Simple and straightforward";
cheppu "✓ Optimized implementation: Better loop bounds";
cheppu "✓ Verbose implementation: Debug information";
cheppu "✓ Edge cases: Handled duplicate values and no solutions";
cheppu "✓ Performance analysis: Complexity breakdown";
cheppu "";
cheppu "Telugu language successfully demonstrates:";
cheppu "• Array literals and indexing";
cheppu "• Function definitions and calls";
cheppu "• Nested loops and conditionals";
cheppu "• String concatenation and formatting";
cheppu "• Mathematical operations";
cheppu "• Algorithm implementation";

cheppu "";
cheppu "═══════════════════════════════════════";
cheppu "        Demo Complete! 🎉";
cheppu "═══════════════════════════════════════";