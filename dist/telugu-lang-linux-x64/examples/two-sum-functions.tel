// Two Sum Problem with Functions - Telugu Language Implementation
// Problem: Given an array of integers and a target sum, 
//          find two numbers that add up to the target

cheppu "Two Sum Problem - Function-Based Implementation";
cheppu "================================================";

// Helper function to get array value at index
// Since we don't have arrays, simulate with hardcoded values
pani getArrayValue(sankhya array_id, sankhya index) {
    // Array 1: [2, 7, 11, 15]
    ayite (array_id == 1) {
        ayite (index == 0) {
            tirigi_pampu 2;
        } lekapothe {
            ayite (index == 1) {
                tirigi_pampu 7;
            } lekapothe {
                ayite (index == 2) {
                    tirigi_pampu 11;
                } lekapothe {
                    tirigi_pampu 15;
                }
            }
        }
    }
    
    // Array 2: [3, 2, 4]
    ayite (array_id == 2) {
        ayite (index == 0) {
            tirigi_pampu 3;
        } lekapothe {
            ayite (index == 1) {
                tirigi_pampu 2;
            } lekapothe {
                tirigi_pampu 4;
            }
        }
    }
    
    // Array 3: [3, 3]
    ayite (array_id == 3) {
        tirigi_pampu 3; // Both indices return 3
    }
    
    // Default return
    tirigi_pampu 0;
}

// Function to print array contents
pani printArray(sankhya array_id, sankhya size) {
    sankhya i = 0;
    sankhya array_str = "[";
    
    varaku (i < size) {
        sankhya value = getArrayValue(array_id, i);
        array_str = array_str + value;
        
        ayite (i < size - 1) {
            array_str = array_str + ", ";
        }
        
        i = i + 1;
    }
    
    array_str = array_str + "]";
    cheppu array_str;
}

// Two Sum solver function
pani twoSum(sankhya array_id, sankhya array_size, sankhya target) {
    cheppu "Searching for two numbers that sum to " + target;
    
    sankhya i = 0;
    varaku (i < array_size) {
        sankhya j = i + 1;
        varaku (j < array_size) {
            sankhya val_i = getArrayValue(array_id, i);
            sankhya val_j = getArrayValue(array_id, j);
            sankhya sum = val_i + val_j;
            
            ayite (sum == target) {
                cheppu "✓ Solution found!";
                cheppu "  Index 1: " + i + " (value: " + val_i + ")";
                cheppu "  Index 2: " + j + " (value: " + val_j + ")";
                cheppu "  Sum: " + val_i + " + " + val_j + " = " + sum;
                tirigi_pampu 1; // Found solution
            }
            
            j = j + 1;
        }
        i = i + 1;
    }
    
    cheppu "✗ No solution found";
    tirigi_pampu 0; // No solution
}

// Function to run a test case
pani runTestCase(sankhya test_number, sankhya array_id, sankhya array_size, sankhya target) {
    cheppu "";
    cheppu "Test Case " + test_number + ":";
    cheppu "Array: ";
    printArray(array_id, array_size);
    cheppu "Target: " + target;
    
    sankhya result = twoSum(array_id, array_size, target);
    tirigi_pampu result;
}

// Function to display algorithm info
pani showAlgorithmInfo() {
    cheppu "";
    cheppu "Algorithm Analysis:";
    cheppu "==================";
    cheppu "✓ Function-based implementation";
    cheppu "✓ Modular design with helper functions";
    cheppu "✓ Reusable components";
    cheppu "✓ Time Complexity: O(n²) - Brute force approach";
    cheppu "✓ Space Complexity: O(1) - Using constant extra space";
}

// Function to calculate time complexity demonstration
pani demonstrateComplexity(sankhya n) {
    cheppu "";
    cheppu "Time Complexity Demonstration for n = " + n + ":";
    
    sankhya operations = n * (n - 1) / 2; // Combinations formula
    cheppu "Number of comparisons: " + operations;
    
    ayite (n <= 5) {
        cheppu "Complexity level: Low (suitable for small arrays)";
    } lekapothe {
        ayite (n <= 100) {
            cheppu "Complexity level: Medium (acceptable for medium arrays)";
        } lekapothe {
            cheppu "Complexity level: High (consider optimization for large arrays)";
        }
    }
}

// Main execution
cheppu "Starting Two Sum Function Demo...";

// Test Case 1: [2, 7, 11, 15], target = 9
runTestCase(1, 1, 4, 9);

// Test Case 2: [3, 2, 4], target = 6  
runTestCase(2, 2, 3, 6);

// Test Case 3: [3, 3], target = 6
runTestCase(3, 3, 2, 6);

// Show algorithm information
showAlgorithmInfo();

// Demonstrate complexity
demonstrateComplexity(4);
demonstrateComplexity(10);
demonstrateComplexity(1000);

